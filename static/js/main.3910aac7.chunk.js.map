{"version":3,"sources":["components/MovieCard/MovieCard.js","components/Loader/Loader.js","components/SearchMovie/SearchMovie.js","App.js","serviceWorker.js","index.js"],"names":["Moviecard","props","movie","className","key","id","src","poster_path","alt","title","release_date","vote_average","overview","Loader","style","display","justifyContent","alignItems","width","height","marginTop","class","SearchMovie","useState","query","setQurey","movies","setMovies","loading","setLodaing","sleep","milliseconds","Promise","resolve","setTimeout","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","console","log","onSubmit","htmlFor","type","name","placeholder","onChange","target","value","filter","map","App","useEffect","document","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uUAEe,SAASA,EAAUC,GAAQ,IAChCC,EAAUD,EAAVC,MAER,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAMG,IAC/B,yBACEF,UAAU,cACVG,IAAG,0DAAqDJ,EAAMK,aAC9DC,IAAKN,EAAMO,MAAQ,WAErB,yBAAKN,UAAU,iBACb,wBAAIA,UAAU,eAAeD,EAAMO,OACnC,2BACE,gDAAsBP,EAAMQ,eAE9B,2BACE,0CAAgBR,EAAMS,eAExB,uBAAGR,UAAU,cAAcD,EAAMU,YClB1B,SAASC,IACtB,OACE,yBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,MAAO,OACPC,OAAQ,OACRC,UAAW,QAGb,uBAAGC,MAAM,kCCTA,SAASC,IAAe,IAAD,EACVC,mBAAS,IADC,mBAC7BC,EAD6B,KACtBC,EADsB,OAERF,mBAAS,IAFD,mBAE7BG,EAF6B,KAErBC,EAFqB,OAGNJ,oBAAS,GAHH,mBAG7BK,EAH6B,KAGpBC,EAHoB,KAK9BC,EAAQ,SAACC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAGhDI,EAAY,uCAAG,WAAOC,GAAP,iCAAAC,EAAA,6DAAUN,EAAV,+BAAyB,IAC5CK,EAAEE,iBACFT,GAAW,GAFQ,SAGbC,EAAMC,GAHO,cAMbQ,EANa,4DAKH,mCALG,iCAM8Ef,EAN9E,kDASCgB,MAAMD,GATP,eASXE,EATW,iBAUEA,EAAIC,OAVN,QAUXC,EAVW,OAWjBhB,EAAUgB,EAAKC,SACff,GAAW,GAZM,kDAcjBgB,QAAQC,IAAR,MAdiB,0DAAH,sDAkBlB,OACE,oCACE,0BAAM3C,UAAU,OAAO4C,SAAUZ,GAC/B,2BAAOa,QAAQ,QAAQ7C,UAAU,SAAjC,cAGA,2BACE8C,KAAK,OACL9C,UAAU,QACV+C,KAAK,QACLC,YAAY,oBACZC,SAAU,SAAChB,GAAD,OAAOX,EAASW,EAAEiB,OAAOC,UAErC,4BAAQL,KAAK,SAAS9C,UAAU,UAAhC,WAIDyB,EACC,kBAACf,EAAD,MAEA,yBAAKV,UAAU,aACZuB,EACE6B,QAAO,SAACrD,GAAD,OAAWA,EAAMK,eACxBiD,KAAI,SAACtD,GAAD,OACH,kBAAC,EAAD,CAAWA,MAAOA,EAAOE,IAAKF,EAAMG,UCvCnCoD,MAbf,WAKE,OAJAC,qBAAU,WACRC,SAASlD,MAAQ,cAChB,IAGD,yBAAKN,UAAU,aACb,wBAAIA,UAAU,SAAd,kBACA,kBAAC,EAAD,QCAcyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFR,SAASS,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.3910aac7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./MovieCard.css\";\r\nexport default function Moviecard(props) {\r\n  const { movie } = props;\r\n\r\n  return (\r\n    <div className=\"card\" key={movie.id}>\r\n      <img\r\n        className=\"card--image\"\r\n        src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n        alt={movie.title + \"poster\"}\r\n      ></img>\r\n      <div className=\"card--content\">\r\n        <h3 className=\"card--title\">{movie.title}</h3>\r\n        <p>\r\n          <small>RELEASE DATE: {movie.release_date}</small>\r\n        </p>\r\n        <p>\r\n          <small>RATING: {movie.vote_average}</small>\r\n        </p>\r\n        <p className=\"card--desc\">{movie.overview}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Loader() {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        marginTop: \"20%\",\r\n      }}\r\n    >\r\n      <i class=\"fas fa-spinner fa-spin fa-5x\"></i>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./SearchMovie.css\";\r\nimport MovieCard from \"../MovieCard/MovieCard.js\";\r\nimport Loader from \"../Loader/Loader.js\";\r\n\r\nexport default function SearchMovie() {\r\n  const [query, setQurey] = useState(\"\");\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLodaing] = useState(false);\r\n\r\n  const sleep = (milliseconds) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  };\r\n\r\n  const searchMovies = async (e, milliseconds = 1000) => {\r\n    e.preventDefault();\r\n    setLodaing(true);\r\n    await sleep(milliseconds);\r\n\r\n    const API_KEY = \"44ca07706ce10687a17e485b9a3166ca\";\r\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`;\r\n\r\n    try {\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      setMovies(data.results);\r\n      setLodaing(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"form\" onSubmit={searchMovies}>\r\n        <label htmlFor=\"query\" className=\"label\">\r\n          Movie Name\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"input\"\r\n          name=\"query\"\r\n          placeholder=\"i.e Jurassic Park\"\r\n          onChange={(e) => setQurey(e.target.value)}\r\n        ></input>\r\n        <button type=\"submit\" className=\"button\">\r\n          Search\r\n        </button>\r\n      </form>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div className=\"card-list\">\r\n          {movies\r\n            .filter((movie) => movie.poster_path)\r\n            .map((movie) => (\r\n              <MovieCard movie={movie} key={movie.id} />\r\n            ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport SearchMovie from \"./components/SearchMovie/SearchMovie\";\n\nfunction App() {\n  useEffect(() => {\n    document.title = \"Movie App\";\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Search Movies!</h1>\n      <SearchMovie />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}